{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\weatherapp\\\\src\\\\Components\\\\SearchBar\\\\SearchBar.jsx\",\n  _s = $RefreshSig$();\nimport { Button, Form } from \"react-bootstrap\";\nimport styles from \"./SearchBar.module.scss\";\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setData } from \"../../features/weather/WeatherSlice\";\nimport { Switch } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SearchBar = () => {\n  _s();\n  const GEOAPIKEY = process.env.REACT_APP_GEO_API_KEY;\n  const WEATHERKEY = process.env.REACT_APP_WEATHER_KEY;\n  const dispatch = useDispatch();\n  const [cities, SetCities] = useState([]);\n  const [Unity, setUnity] = useState('metric');\n  const handleInput = e => {\n    const {\n      value\n    } = e.currentTarget;\n    fetch(`https://api.geoapify.com/v1/geocode/autocomplete?text=${value}&type=city&format=json&apiKey=${GEOAPIKEY}`).then(response => response.json()).then(result => SetCities(result.results.map(data => {\n      const {\n        lat,\n        lon,\n        city,\n        country,\n        formatted\n      } = data;\n      return {\n        lat,\n        lon,\n        city,\n        country,\n        formatted\n      };\n    })));\n  };\n  const handleAutoCompleteSelect = (e, value) => {\n    const {\n      lon,\n      lat\n    } = value;\n    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&units=${Unity}&lon=${lon}&appid=${WEATHERKEY}`).then(response => response.json()).then(json => {\n      const {\n        clouds,\n        main,\n        name,\n        sys,\n        weather,\n        wind\n      } = json;\n      dispatch(setData({\n        clouds,\n        main,\n        name,\n        sys,\n        weather,\n        wind\n      }));\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Switch, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: styles.searchContainer,\n        children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n          className: styles.searchInput,\n          size: 'lg',\n          clearOnBlur: false,\n          onChange: handleAutoCompleteSelect,\n          getOptionLabel: option => option.formatted,\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n            onChange: handleInput,\n            ...params,\n            label: 'Enter your City ....'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 20\n          }, this),\n          options: cities\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: styles.searchButton,\n          variant: \"primary\",\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n_s(SearchBar, \"vVBpdedmAuUC/Q3TAJkc1PXX+dg=\", false, function () {\n  return [useDispatch];\n});\n_c = SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["Button","Form","styles","Autocomplete","TextField","useState","useDispatch","setData","Switch","jsxDEV","_jsxDEV","Fragment","_Fragment","SearchBar","_s","GEOAPIKEY","process","env","REACT_APP_GEO_API_KEY","WEATHERKEY","REACT_APP_WEATHER_KEY","dispatch","cities","SetCities","Unity","setUnity","handleInput","e","value","currentTarget","fetch","then","response","json","result","results","map","data","lat","lon","city","country","formatted","handleAutoCompleteSelect","clouds","main","name","sys","weather","wind","children","fileName","_jsxFileName","lineNumber","columnNumber","Group","className","searchContainer","searchInput","size","clearOnBlur","onChange","getOptionLabel","option","renderInput","params","label","options","searchButton","variant","_c","$RefreshReg$"],"sources":["C:/react/weatherapp/src/Components/SearchBar/SearchBar.jsx"],"sourcesContent":["import { Button, Form } from \"react-bootstrap\"\r\nimport styles from \"./SearchBar.module.scss\"\r\nimport { Autocomplete, TextField } from \"@mui/material\"\r\nimport { useState } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { setData } from \"../../features/weather/WeatherSlice\"\r\nimport { Switch} from \"@mui/material\"\r\nexport const SearchBar=()=> {\r\n  const GEOAPIKEY=process.env.REACT_APP_GEO_API_KEY\r\n  const WEATHERKEY=process.env.REACT_APP_WEATHER_KEY\r\n  const dispatch=useDispatch()\r\n  const [cities,SetCities]=useState([])\r\n  const [Unity,setUnity]=useState('metric')\r\n  const handleInput=(e)=>{\r\n    const {value}=e.currentTarget\r\n    fetch(`https://api.geoapify.com/v1/geocode/autocomplete?text=${value}&type=city&format=json&apiKey=${GEOAPIKEY}`)\r\n    .then(response => response.json())\r\n    .then(result => SetCities(result.results.map(data=>{\r\n      const {lat,lon,city,country,formatted}=data\r\n      return {lat,lon,city,country,formatted}}\r\n      )))\r\n    \r\n  }\r\n\r\n  const handleAutoCompleteSelect=(e,value)=>{\r\n     \r\n          const {lon,lat}=value\r\n          fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&units=${Unity}&lon=${lon}&appid=${WEATHERKEY}`)\r\n      .then(response => response.json())\r\n    .then(json => {\r\n        const {clouds,main,name,sys,weather,wind}=json\r\n        dispatch(setData({clouds,main,name,sys,weather,wind}))\r\n    })\r\n  }\r\n  return (\r\n   <>\r\n   <Form >\r\n    <Switch/>\r\n         <Form.Group className={styles.searchContainer}> \r\n          <Autocomplete className={styles.searchInput}  size={'lg'} \r\n                   clearOnBlur={false}\r\n                   onChange={handleAutoCompleteSelect}\r\n                   getOptionLabel={(option)=> option.formatted }\r\n                   renderInput={(params)=>\r\n                   <TextField  onChange={handleInput}  {...params} label={'Enter your City ....'}/>} \r\n                   options={cities}/> \r\n          \r\n              <Button className={styles.searchButton} variant=\"primary\" >Search</Button>   \r\n        </Form.Group>              \r\n   </Form>\r\n   </>\r\n  )\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}