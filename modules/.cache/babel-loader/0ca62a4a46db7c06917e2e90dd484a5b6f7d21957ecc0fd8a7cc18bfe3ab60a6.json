{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\weatherapp\\\\src\\\\Components\\\\SearchBar\\\\SearchBar.jsx\",\n  _s = $RefreshSig$();\nimport { Button, Form } from \"react-bootstrap\";\nimport styles from \"./SearchBar.module.scss\";\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setData, resetData } from \"../../features/weather/WeatherSlice\";\nimport { Switch } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SearchBar = () => {\n  _s();\n  const GEOAPIKEY = process.env.REACT_APP_GEO_API_KEY;\n  const WEATHERKEY = process.env.REACT_APP_WEATHER_KEY;\n  const dispatch = useDispatch();\n  const [cities, SetCities] = useState([]);\n  const [Unity, setUnity] = useState('metric');\n  const hasGeoLocation = () => {\n    return navigator.geolocation;\n  };\n  const handleInput = e => {\n    const {\n      value\n    } = e.currentTarget;\n    fetch(`https://api.geoapify.com/v1/geocode/autocomplete?text=${value}&type=city&format=json&apiKey=${GEOAPIKEY}`).then(response => response.json()).then(result => SetCities(result.results.map(data => {\n      const {\n        lat,\n        lon,\n        city,\n        country,\n        formatted\n      } = data;\n      return {\n        lat,\n        lon,\n        city,\n        country,\n        formatted\n      };\n    })));\n  };\n  const handleAutoCompleteSelect = (e, value) => {\n    if (value !== null) {\n      const {\n        lon,\n        lat\n      } = value;\n      fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&units=${Unity}&lon=${lon}&appid=${WEATHERKEY}`).then(response => response.json()).then(json => {\n        const {\n          clouds,\n          main,\n          name,\n          sys,\n          weather,\n          wind\n        } = json;\n        dispatch(setData({\n          clouds,\n          main,\n          name,\n          sys,\n          weather,\n          wind\n        }));\n      });\n    } else {\n      dispatch(resetData());\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Switch, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: styles.searchContainer,\n        children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n          className: styles.searchInput,\n          size: 'lg',\n          clearOnBlur: false,\n          onChange: handleAutoCompleteSelect,\n          getOptionLabel: option => option.formatted,\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n            onChange: handleInput,\n            ...params,\n            label: 'Enter your City ....'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 20\n          }, this),\n          options: cities\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: styles.searchButton,\n          variant: \"primary\",\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n_s(SearchBar, \"vVBpdedmAuUC/Q3TAJkc1PXX+dg=\", false, function () {\n  return [useDispatch];\n});\n_c = SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["Button","Form","styles","Autocomplete","TextField","useEffect","useState","useDispatch","setData","resetData","Switch","jsxDEV","_jsxDEV","Fragment","_Fragment","SearchBar","_s","GEOAPIKEY","process","env","REACT_APP_GEO_API_KEY","WEATHERKEY","REACT_APP_WEATHER_KEY","dispatch","cities","SetCities","Unity","setUnity","hasGeoLocation","navigator","geolocation","handleInput","e","value","currentTarget","fetch","then","response","json","result","results","map","data","lat","lon","city","country","formatted","handleAutoCompleteSelect","clouds","main","name","sys","weather","wind","children","fileName","_jsxFileName","lineNumber","columnNumber","Group","className","searchContainer","searchInput","size","clearOnBlur","onChange","getOptionLabel","option","renderInput","params","label","options","searchButton","variant","_c","$RefreshReg$"],"sources":["C:/react/weatherapp/src/Components/SearchBar/SearchBar.jsx"],"sourcesContent":["import { Button, Form } from \"react-bootstrap\"\r\nimport styles from \"./SearchBar.module.scss\"\r\nimport { Autocomplete, TextField } from \"@mui/material\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { setData , resetData} from \"../../features/weather/WeatherSlice\"\r\nimport { Switch} from \"@mui/material\"\r\nexport const SearchBar=()=> {\r\n  const GEOAPIKEY=process.env.REACT_APP_GEO_API_KEY\r\n  const WEATHERKEY=process.env.REACT_APP_WEATHER_KEY\r\n  const dispatch=useDispatch()\r\n  const [cities,SetCities]=useState([])\r\n  const [Unity,setUnity]=useState('metric')\r\n  \r\n \r\n  const hasGeoLocation=()=>{\r\n          return navigator.geolocation\r\n  }\r\n  const handleInput=(e)=>{\r\n    const {value}=e.currentTarget\r\n    fetch(`https://api.geoapify.com/v1/geocode/autocomplete?text=${value}&type=city&format=json&apiKey=${GEOAPIKEY}`)\r\n    .then(response => response.json())\r\n    .then(result => SetCities(result.results.map(data=>{\r\n      const {lat,lon,city,country,formatted}=data\r\n      return {lat,lon,city,country,formatted}}\r\n      )))\r\n    \r\n  }\r\n\r\n  const handleAutoCompleteSelect=(e,value)=>{\r\n      if(value !== null){\r\n          const {lon,lat}=value\r\n          fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&units=${Unity}&lon=${lon}&appid=${WEATHERKEY}`)\r\n         .then(response => response.json())\r\n         .then(json => {\r\n              const {clouds,main,name,sys,weather,wind}=json\r\n              dispatch(setData({clouds,main,name,sys,weather,wind}))\r\n          }\r\n        )\r\n      }\r\n      else{\r\n           dispatch(resetData())\r\n      }\r\n  }\r\n  return (\r\n   <>\r\n   <Form >\r\n    <Switch/>\r\n         <Form.Group className={styles.searchContainer}> \r\n          <Autocomplete className={styles.searchInput}  size={'lg'} \r\n                   clearOnBlur={false}\r\n                   onChange={handleAutoCompleteSelect}\r\n                   getOptionLabel={(option)=> option.formatted }\r\n                   renderInput={(params)=>\r\n                   <TextField  onChange={handleInput}  {...params} label={'Enter your City ....'}/>} \r\n                   options={cities}/> \r\n          \r\n              <Button className={styles.searchButton} variant=\"primary\" >Search</Button>   \r\n        </Form.Group>              \r\n   </Form>\r\n   </>\r\n  )\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}